
Ex00
Lex echo implementation.
Simplest lex program

Ex01
Verb/not verb word recognition

Ex02
Added more complicated examples to ex01 (nouns, etc). Nothing changed actually.

Ex03
Dynamic lookup table. User can declare words in runtime, lexer can recognize
declaration or usage of symbols.

Ex04
First program with yacc. 
Lexer has a lookup table, parser has single rule.

t1
a^nb^n grammar resolution

wc
Lex version of UNIX wc utility.
First use of lex definitions section and yyleng internal variable.
When 2 rules match lex uses the one that was added EARLIER.
lex uses longest string to match

wc_multiple_files
Wc thich can handle multiple files.
First usage of yywrap() function that is called after EOF.
Still need to debug. Hangs on single file inside yylex().
Debug later that stuff.

argparse** (yet does not compile with bison)
redefines macros input and uinput 
to read from command line arguments (or custom string) instead of stdin.
First use of "start state" that helps to parse context-dependent input.

start_state
Another trivial example of context-dependent lexer


c_course
C source code analyzer. Count blankm comments, codelines

calc0
Simplest calculator. Deals only with int numbers, + and -. 
Both operations are left-associative.

calc1
Added division, unary minus, brackets and multiplication to previous examle.
Added declarations of operator precedence and associativity.
Instead of explicit precedence declarations we could use implicit - 
add symbols like product and sum and grammars with them

calc2
Added single-letter variables to calc1.
First use of typed tokens and typed nonterminals.
y.tab.h contains declaration type YYSTYPE and variable	yylval 
#define NAME 257
#define NUMBER 258
#define UMINUS 259
typedef union {
double dval;
int vblno;
} YYSTYPE;
extern YYSTYPE yylval;}

First use of end of input pattern ($). 

calc3
Added symbol table to calc2.
Symbol table is implemented as array of fixed size.
Now we can declare variable names of arbitrary length.

calc4
Added simple mathematical functions like exp(), log(), sqrt()... to calc3.

In our case parser resolves function names. 
(We could also hardcode function names as tokens or make symbol table lookup 
 by lexer, not parser)

Functions and variable names can overlap.
